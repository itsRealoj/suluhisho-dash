{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/realoj/Dev/suluhisho-dash/pages/admin/send-push-notificaton.js\";\nimport React, { useEffect, useState } from 'react';\nimport { firestore, auth } from '../../firebase';\nimport firebase from 'firebase';\nimport { useRouter } from 'next/router';\nimport { useFormik } from 'formik';\nimport Admin from 'layouts/Admin.js';\nimport GridItem from 'components/Grid/GridItem.js';\nimport Send from '@material-ui/icons/Send';\nimport GridContainer from 'components/Grid/GridContainer.js';\nimport CustomInput from 'components/CustomInput/CustomInput.js';\nimport Button from 'components/CustomButtons/Button.js';\nimport Card from 'components/Card/Card.js';\nimport CardHeader from 'components/Card/CardHeader.js';\nimport CardBody from 'components/Card/CardBody.js';\nimport CardFooter from 'components/Card/CardFooter.js';\nimport axios from 'axios';\n\nfunction AlertEdit() {\n  const router = useRouter();\n  const {\n    0: isUserLoggedIn,\n    1: setIsUserLoggedIn\n  } = useState(false);\n  const formik = useFormik({\n    initialValues: {\n      title: '',\n      text: '',\n      dateCreated: new Date(),\n      category: 'general'\n    },\n    onSubmit: values => {\n      createIncident(values);\n      axios.post(process.env.NEXT_PUBLIC_PUSH_NOTIFICATION_URL, {\n        title: values.title,\n        text: values.text\n      }, {\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8'\n        }\n      });\n    }\n  });\n\n  const getUser = () => {\n    return firebase.auth().currentUser.email;\n  };\n\n  const createIncident = async newFAQData => {\n    newFAQData.date = Date.now();\n    newFAQData.incidentType = 'push notification';\n    newFAQData.senderName = getUser();\n    newFAQData.status = 'sent';\n    firestore.collection('sms').add(newFAQData).then(() => {\n      alert('Push notification sent!');\n    }).then(() => {\n      router.push('dashboard');\n    }).catch(error => {\n      console.log('could not create FAQ...', error);\n    });\n  };\n\n  useEffect(() => {\n    auth.onAuthStateChanged(async user => {\n      if (!user) {\n        router.push('../login');\n      } else {\n        setIsUserLoggedIn(true);\n      }\n    });\n  }, []);\n  return isUserLoggedIn ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formik.handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(GridContainer, {\n        children: /*#__PURE__*/_jsxDEV(GridItem, {\n          xs: 12,\n          sm: 12,\n          md: 8,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              color: \"dark\",\n              children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                className: styles.cardTitleWhite,\n                children: \"Send New Push Notification\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n              children: /*#__PURE__*/_jsxDEV(GridContainer, {\n                children: [/*#__PURE__*/_jsxDEV(GridItem, {\n                  xs: 12,\n                  sm: 12,\n                  md: 12,\n                  children: /*#__PURE__*/_jsxDEV(CustomInput, {\n                    labelText: `Title:`,\n                    id: \"title\",\n                    name: \"title\",\n                    onChange: formik.handleChange,\n                    value: formik.values.title,\n                    formControlProps: {\n                      fullWidth: true\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n                  xs: 12,\n                  sm: 12,\n                  md: 12,\n                  children: /*#__PURE__*/_jsxDEV(CustomInput, {\n                    id: \"text\",\n                    name: \"text\",\n                    onChange: formik.handleChange,\n                    value: formik.values.text,\n                    placeholder: formik.values.text,\n                    labelText: 'Add new text....',\n                    formControlProps: {\n                      fullWidth: true\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                type: \"submit\",\n                color: \"primary\",\n                children: /*#__PURE__*/_jsxDEV(Send, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                color: \"primary\",\n                onClick: () => {\n                  router.push('dashboard');\n                },\n                children: \"exit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this) : null;\n}\n\nconst styles = {\n  cardTitleWhite: {\n    color: '#FFFFFF',\n    marginTop: '0px',\n    minHeight: 'auto',\n    fontWeight: '300',\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: '3px',\n    textDecoration: 'none'\n  }\n};\nAlertEdit.layout = Admin;\nexport default AlertEdit;","map":{"version":3,"sources":["/Users/realoj/Dev/suluhisho-dash/pages/admin/send-push-notificaton.js"],"names":["React","useEffect","useState","firestore","auth","firebase","useRouter","useFormik","Admin","GridItem","Send","GridContainer","CustomInput","Button","Card","CardHeader","CardBody","CardFooter","axios","AlertEdit","router","isUserLoggedIn","setIsUserLoggedIn","formik","initialValues","title","text","dateCreated","Date","category","onSubmit","values","createIncident","post","process","env","NEXT_PUBLIC_PUSH_NOTIFICATION_URL","headers","getUser","currentUser","email","newFAQData","date","now","incidentType","senderName","status","collection","add","then","alert","push","catch","error","console","log","onAuthStateChanged","user","handleSubmit","styles","cardTitleWhite","handleChange","fullWidth","color","marginTop","minHeight","fontWeight","fontFamily","marginBottom","textDecoration","layout"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,gBAAhC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,QAA0B,QAA1B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,MAAP,MAAmB,oCAAnB;AACA,OAAOC,IAAP,MAAiB,yBAAjB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,QAAP,MAAqB,6BAArB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,SAAT,GAAqB;AACnB,QAAMC,MAAM,GAAGd,SAAS,EAAxB;AACA,QAAM;AAAA,OAACe,cAAD;AAAA,OAAiBC;AAAjB,MAAsCpB,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAMqB,MAAM,GAAGhB,SAAS,CAAC;AACvBiB,IAAAA,aAAa,EAAE;AACbC,MAAAA,KAAK,EAAE,EADM;AAEbC,MAAAA,IAAI,EAAE,EAFO;AAGbC,MAAAA,WAAW,EAAE,IAAIC,IAAJ,EAHA;AAIbC,MAAAA,QAAQ,EAAE;AAJG,KADQ;AAOvBC,IAAAA,QAAQ,EAAGC,MAAD,IAAY;AACpBC,MAAAA,cAAc,CAACD,MAAD,CAAd;AACAb,MAAAA,KAAK,CAACe,IAAN,CACEC,OAAO,CAACC,GAAR,CAAYC,iCADd,EAEE;AACEX,QAAAA,KAAK,EAAEM,MAAM,CAACN,KADhB;AAEEC,QAAAA,IAAI,EAAEK,MAAM,CAACL;AAFf,OAFF,EAME;AACEW,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADX,OANF;AAYD;AArBsB,GAAD,CAAxB;;AAwBA,QAAMC,OAAO,GAAG,MAAM;AACpB,WAAOjC,QAAQ,CAACD,IAAT,GAAgBmC,WAAhB,CAA4BC,KAAnC;AACD,GAFD;;AAIA,QAAMR,cAAc,GAAG,MAAOS,UAAP,IAAsB;AAC3CA,IAAAA,UAAU,CAACC,IAAX,GAAkBd,IAAI,CAACe,GAAL,EAAlB;AACAF,IAAAA,UAAU,CAACG,YAAX,GAA0B,mBAA1B;AACAH,IAAAA,UAAU,CAACI,UAAX,GAAwBP,OAAO,EAA/B;AACAG,IAAAA,UAAU,CAACK,MAAX,GAAoB,MAApB;AAEA3C,IAAAA,SAAS,CACN4C,UADH,CACc,KADd,EAEGC,GAFH,CAEOP,UAFP,EAGGQ,IAHH,CAGQ,MAAM;AACVC,MAAAA,KAAK,CAAC,yBAAD,CAAL;AACD,KALH,EAMGD,IANH,CAMQ,MAAM;AACV7B,MAAAA,MAAM,CAAC+B,IAAP,CAAY,WAAZ;AACD,KARH,EASGC,KATH,CASUC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAvC;AACD,KAXH;AAYD,GAlBD;;AAoBApD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,IAAI,CAACoD,kBAAL,CAAwB,MAAOC,IAAP,IAAgB;AACtC,UAAI,CAACA,IAAL,EAAW;AACTrC,QAAAA,MAAM,CAAC+B,IAAP,CAAY,UAAZ;AACD,OAFD,MAEO;AACL7B,QAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;AACF,KAND;AAOD,GARQ,EAQN,EARM,CAAT;AAUA,SAAOD,cAAc,gBACnB;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEE,MAAM,CAACmC,YAAvB;AAAA,6BACE,QAAC,aAAD;AAAA,+BACE,QAAC,QAAD;AAAU,UAAA,EAAE,EAAE,EAAd;AAAkB,UAAA,EAAE,EAAE,EAAtB;AAA0B,UAAA,EAAE,EAAE,CAA9B;AAAA,iCACE,QAAC,IAAD;AAAA,oCACE,QAAC,UAAD;AAAY,cAAA,KAAK,EAAC,MAAlB;AAAA,qCACE;AAAI,gBAAA,SAAS,EAAEC,MAAM,CAACC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAME,QAAC,QAAD;AAAA,qCACE,QAAC,aAAD;AAAA,wCACE,QAAC,QAAD;AAAU,kBAAA,EAAE,EAAE,EAAd;AAAkB,kBAAA,EAAE,EAAE,EAAtB;AAA0B,kBAAA,EAAE,EAAE,EAA9B;AAAA,yCACE,QAAC,WAAD;AACE,oBAAA,SAAS,EAAG,QADd;AAEE,oBAAA,EAAE,EAAC,OAFL;AAGE,oBAAA,IAAI,EAAC,OAHP;AAIE,oBAAA,QAAQ,EAAErC,MAAM,CAACsC,YAJnB;AAKE,oBAAA,KAAK,EAAEtC,MAAM,CAACQ,MAAP,CAAcN,KALvB;AAME,oBAAA,gBAAgB,EAAE;AAChBqC,sBAAAA,SAAS,EAAE;AADK;AANpB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,wBADF,eAaE,QAAC,QAAD;AAAU,kBAAA,EAAE,EAAE,EAAd;AAAkB,kBAAA,EAAE,EAAE,EAAtB;AAA0B,kBAAA,EAAE,EAAE,EAA9B;AAAA,yCACE,QAAC,WAAD;AACE,oBAAA,EAAE,EAAC,MADL;AAEE,oBAAA,IAAI,EAAC,MAFP;AAGE,oBAAA,QAAQ,EAAEvC,MAAM,CAACsC,YAHnB;AAIE,oBAAA,KAAK,EAAEtC,MAAM,CAACQ,MAAP,CAAcL,IAJvB;AAKE,oBAAA,WAAW,EAAEH,MAAM,CAACQ,MAAP,CAAcL,IAL7B;AAME,oBAAA,SAAS,EAAE,kBANb;AAOE,oBAAA,gBAAgB,EAAE;AAChBoC,sBAAAA,SAAS,EAAE;AADK;AAPpB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,wBAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBANF,eAmCE,QAAC,UAAD;AAAA,sCACE,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAC,QAAb;AAAsB,gBAAA,KAAK,EAAC,SAA5B;AAAA,uCACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE,QAAC,MAAD;AACE,gBAAA,KAAK,EAAC,SADR;AAEE,gBAAA,OAAO,EAAE,MAAM;AACb1C,kBAAAA,MAAM,CAAC+B,IAAP,CAAY,WAAZ;AACD,iBAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAnCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADmB,GA0DjB,IA1DJ;AA2DD;;AAED,MAAMQ,MAAM,GAAG;AACbC,EAAAA,cAAc,EAAE;AACdG,IAAAA,KAAK,EAAE,SADO;AAEdC,IAAAA,SAAS,EAAE,KAFG;AAGdC,IAAAA,SAAS,EAAE,MAHG;AAIdC,IAAAA,UAAU,EAAE,KAJE;AAKdC,IAAAA,UAAU,EAAE,4CALE;AAMdC,IAAAA,YAAY,EAAE,KANA;AAOdC,IAAAA,cAAc,EAAE;AAPF;AADH,CAAf;AAYAlD,SAAS,CAACmD,MAAV,GAAmB9D,KAAnB;AAEA,eAAeW,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { firestore, auth } from '../../firebase';\nimport firebase from 'firebase';\nimport { useRouter } from 'next/router';\nimport { useFormik } from 'formik';\nimport Admin from 'layouts/Admin.js';\nimport GridItem from 'components/Grid/GridItem.js';\nimport Send from '@material-ui/icons/Send';\nimport GridContainer from 'components/Grid/GridContainer.js';\nimport CustomInput from 'components/CustomInput/CustomInput.js';\nimport Button from 'components/CustomButtons/Button.js';\nimport Card from 'components/Card/Card.js';\nimport CardHeader from 'components/Card/CardHeader.js';\nimport CardBody from 'components/Card/CardBody.js';\nimport CardFooter from 'components/Card/CardFooter.js';\nimport axios from 'axios';\n\nfunction AlertEdit() {\n  const router = useRouter();\n  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);\n\n  const formik = useFormik({\n    initialValues: {\n      title: '',\n      text: '',\n      dateCreated: new Date(),\n      category: 'general',\n    },\n    onSubmit: (values) => {\n      createIncident(values);\n      axios.post(\n        process.env.NEXT_PUBLIC_PUSH_NOTIFICATION_URL,\n        {\n          title: values.title,\n          text: values.text,\n        },\n        {\n          headers: {\n            'Content-type': 'application/json; charset=UTF-8',\n          },\n        }\n      );\n    },\n  });\n\n  const getUser = () => {\n    return firebase.auth().currentUser.email;\n  };\n\n  const createIncident = async (newFAQData) => {\n    newFAQData.date = Date.now();\n    newFAQData.incidentType = 'push notification';\n    newFAQData.senderName = getUser();\n    newFAQData.status = 'sent';\n\n    firestore\n      .collection('sms')\n      .add(newFAQData)\n      .then(() => {\n        alert('Push notification sent!');\n      })\n      .then(() => {\n        router.push('dashboard');\n      })\n      .catch((error) => {\n        console.log('could not create FAQ...', error);\n      });\n  };\n\n  useEffect(() => {\n    auth.onAuthStateChanged(async (user) => {\n      if (!user) {\n        router.push('../login');\n      } else {\n        setIsUserLoggedIn(true);\n      }\n    });\n  }, []);\n\n  return isUserLoggedIn ? (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <GridContainer>\n          <GridItem xs={12} sm={12} md={8}>\n            <Card>\n              <CardHeader color=\"dark\">\n                <h4 className={styles.cardTitleWhite}>\n                  Send New Push Notification\n                </h4>\n              </CardHeader>\n              <CardBody>\n                <GridContainer>\n                  <GridItem xs={12} sm={12} md={12}>\n                    <CustomInput\n                      labelText={`Title:`}\n                      id=\"title\"\n                      name=\"title\"\n                      onChange={formik.handleChange}\n                      value={formik.values.title}\n                      formControlProps={{\n                        fullWidth: true,\n                      }}\n                    />\n                  </GridItem>\n                  <GridItem xs={12} sm={12} md={12}>\n                    <CustomInput\n                      id=\"text\"\n                      name=\"text\"\n                      onChange={formik.handleChange}\n                      value={formik.values.text}\n                      placeholder={formik.values.text}\n                      labelText={'Add new text....'}\n                      formControlProps={{\n                        fullWidth: true,\n                      }}\n                    />\n                  </GridItem>\n                </GridContainer>\n              </CardBody>\n              <CardFooter>\n                <Button type=\"submit\" color=\"primary\">\n                  <Send />\n                </Button>\n                <Button\n                  color=\"primary\"\n                  onClick={() => {\n                    router.push('dashboard');\n                  }}\n                >\n                  exit\n                </Button>\n              </CardFooter>\n            </Card>\n          </GridItem>\n        </GridContainer>\n      </form>\n    </div>\n  ) : null;\n}\n\nconst styles = {\n  cardTitleWhite: {\n    color: '#FFFFFF',\n    marginTop: '0px',\n    minHeight: 'auto',\n    fontWeight: '300',\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: '3px',\n    textDecoration: 'none',\n  },\n};\n\nAlertEdit.layout = Admin;\n\nexport default AlertEdit;\n"]},"metadata":{},"sourceType":"module"}