{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/realoj/Dev/suluhisho-dash/pages/admin/alerts.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { firestore, auth } from '../../firebase';\nimport moment from 'moment';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Admin from 'layouts/Admin.js';\nimport Divider from '@material-ui/core/Divider';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Paper from '@material-ui/core/Paper';\nimport GridItem from 'components/Grid/GridItem.js';\nimport GridContainer from 'components/Grid/GridContainer.js';\nimport FilterAlerts from 'components/Menu/filterDataMenu';\nimport DownloadReport from 'components/Menu/downloadReport';\nimport Table from 'components/Table/Table.js';\nimport Card from 'components/Card/Card.js';\nimport CardHeader from 'components/Card/CardHeader.js';\nimport CardBody from 'components/Card/CardBody.js';\nimport ManageAlert from 'components/Menu/viewAlertsMenu.js';\nimport { useRouter } from 'next/router';\nexport default function Reports() {\n  _s();\n\n  const useStyles = makeStyles(styles);\n  const router = useRouter();\n  const classes = useStyles();\n  const {\n    0: alerts,\n    1: setAlerts\n  } = useState([]);\n  const {\n    0: lastVisibleData,\n    1: setLastVisibleData\n  } = useState(null);\n  const {\n    0: page,\n    1: setPage\n  } = useState(0);\n  const {\n    0: rowsPerPage,\n    1: setRowsPerPage\n  } = useState(10);\n  const {\n    0: totalAlerts,\n    1: setTotalAlerts\n  } = useState(0);\n  const {\n    0: isUserLoggedIn,\n    1: setIsUserLoggedIn\n  } = useState(false); // PDF report\n\n  const alertsReport = new jsPDF();\n\n  const headRows = () => [['Sender Name', 'Sender Number', 'Location', 'Message', 'Longitude', 'Latitude', 'Incident Type']];\n\n  const bodyRows = () => alerts && alerts.map(alert => [alert.senderName, alert.senderNumber, alert.location, alert.incidentType, alert.message, alert.lng, alert.lat]);\n\n  alertsReport.autoTable({\n    theme: 'striped',\n    head: headRows(),\n    body: bodyRows(),\n    margin: {\n      top: 20\n    },\n    styles: {\n      lineWidth: 1\n    },\n    headStyles: {\n      fillColor: [0, 0, 0],\n      fontSize: 15\n    },\n    footStyles: {\n      fillColor: [241, 196, 15],\n      fontSize: 15\n    }\n  });\n\n  const handleDownload = () => alertsReport.save();\n\n  const handleChangePage = (event, newPage) => {\n    newPage > page ? fetchNextAlerts() : fetchPreviousAlerts();\n    setPage(newPage);\n  };\n\n  const fetchOldAlerts = () => {\n    const alertsArr = [];\n    firestore.collection('sms').orderBy('date', 'desc').limit(rowsPerPage).get().then(querySnapshot => {\n      querySnapshot.forEach(alert => {\n        let currentAlertData = alert.data();\n        currentAlertData.id = alert.id;\n        alertsArr.push(currentAlertData);\n        setLastVisibleData(querySnapshot.docs[querySnapshot.docs.length - 1]);\n      });\n    }).then(() => {\n      setAlerts(alertsArr);\n    });\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n    fetchAlerts();\n  };\n\n  const alertsSize = () => {\n    firestore.collection('sms').get().then(snap => {\n      setTotalAlerts(snap.size);\n    });\n  };\n\n  const fetchAlerts = async () => {\n    const alertsArr = [];\n    firestore.collection('sms').orderBy('date').limit(rowsPerPage).get().then(querySnapshot => {\n      querySnapshot.forEach(alert => {\n        let currentAlertData = alert.data();\n        currentAlertData.id = alert.id;\n        alertsArr.push(currentAlertData);\n        setLastVisibleData(querySnapshot.docs[querySnapshot.docs.length - 1]);\n      });\n    }).then(() => {\n      setAlerts(alertsArr);\n    });\n  };\n\n  const fetchNextAlerts = async () => {\n    const alertsArr = [];\n    firestore.collection('sms').orderBy('date').startAfter(lastVisibleData).limit(rowsPerPage).get().then(querySnapshot => {\n      querySnapshot.forEach(alert => {\n        let currentAlertData = alert.data();\n        currentAlertData.id = alert.id;\n        alertsArr.push(currentAlertData);\n        setLastVisibleData(querySnapshot.docs[querySnapshot.docs.length - 1]);\n      });\n    }).then(() => {\n      setAlerts(alertsArr);\n    });\n  }; // to fix fetch previous alerts\n\n\n  const fetchPreviousAlerts = async () => {\n    const alertsArr = [];\n    firestore.collection('sms').orderBy('date').endBefore(lastVisibleData).limit(rowsPerPage).get().then(querySnapshot => {\n      querySnapshot.forEach(alert => {\n        let currentAlertData = alert.data();\n        currentAlertData.id = alert.id;\n        alertsArr.push(currentAlertData);\n        setLastVisibleData(querySnapshot.docs[querySnapshot.docs.length - 1]);\n      });\n    }).then(() => {\n      setAlerts(alertsArr);\n    });\n  };\n\n  useEffect(() => {\n    fetchAlerts();\n    alertsSize();\n    auth.onAuthStateChanged(async user => {\n      if (!user) {\n        router.push('../login');\n      } else {\n        setIsUserLoggedIn(true);\n      }\n    });\n  }, []);\n  return isUserLoggedIn ? /*#__PURE__*/_jsxDEV(GridContainer, {\n    children: /*#__PURE__*/_jsxDEV(GridItem, {\n      xs: 12,\n      sm: 12,\n      md: 12,\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          children: /*#__PURE__*/_jsxDEV(GridContainer, {\n            children: [/*#__PURE__*/_jsxDEV(GridItem, {\n              xs: 12,\n              sm: 12,\n              md: 10,\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                className: classes.cardTitleWhite,\n                children: \"Incidents\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: classes.cardCategoryWhite,\n                children: \"View and Manage all incidents.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n              xs: 12,\n              sm: 12,\n              md: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n          children: [/*#__PURE__*/_jsxDEV(GridContainer, {\n            children: [/*#__PURE__*/_jsxDEV(GridItem, {\n              xs: 12,\n              sm: 12,\n              md: 10,\n              children: /*#__PURE__*/_jsxDEV(FilterAlerts, {\n                fetchOldAlerts: fetchOldAlerts,\n                fetchNewAlerts: fetchAlerts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                float: 'right',\n                marginLeft: '55px'\n              },\n              children: /*#__PURE__*/_jsxDEV(DownloadReport, {\n                handleDownload: handleDownload,\n                alertsData: alerts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            style: classes.root,\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              tableHeaderColor: \"primary\",\n              tableHead: ['Date', 'Sender name', 'Sender Number.', 'Location', 'Recipients', 'Status', 'Message', 'Action'],\n              tableData: alerts.map(data => [moment(data.date.seconds).format('LLL'), data.senderName, data.senderNumber, data.location, data.recipients, data.status, data.message, /*#__PURE__*/_jsxDEV(ManageAlert, {\n                alertsData: data,\n                fetchAlerts: fetchAlerts\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this)])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GridContainer, {\n          children: [/*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            sm: 12,\n            md: 10,\n            container: true,\n            justify: \"center\",\n            children: /*#__PURE__*/_jsxDEV(TablePagination, {\n              component: \"div\",\n              count: totalAlerts,\n              page: page,\n              onPageChange: handleChangePage,\n              rowsPerPage: rowsPerPage,\n              onRowsPerPageChange: handleChangeRowsPerPage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(GridItem, {\n            xs: 12,\n            sm: 12,\n            md: 2,\n            container: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this) : null;\n} // styles\n\n_s(Reports, \"C3gm6tvEwt0DrhE2EDKUJAL5wzs=\", true, function () {\n  return [useRouter];\n});\n\n_c = Reports;\nconst styles = {\n  cardCategoryWhite: {\n    color: '#434444',\n    margin: '0',\n    fontSize: '14px',\n    marginTop: '0',\n    marginBottom: '0'\n  },\n  cardTitleWhite: {\n    color: '#434444',\n    marginTop: '0px',\n    minHeight: 'auto',\n    fontWeight: '500',\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: '3px',\n    textDecoration: 'none',\n    '& small': {\n      color: '#777',\n      fontSize: '65%',\n      fontWeight: '400',\n      lineHeight: '1'\n    },\n    printReport: {\n      float: 'right'\n    }\n  },\n  pagination: {\n    padding: '10px'\n  }\n};\nReports.layout = Admin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reports\");","map":{"version":3,"sources":["/Users/realoj/Dev/suluhisho-dash/pages/admin/alerts.js"],"names":["React","useEffect","useState","firestore","auth","moment","jsPDF","makeStyles","Admin","Divider","TablePagination","Paper","GridItem","GridContainer","FilterAlerts","DownloadReport","Table","Card","CardHeader","CardBody","ManageAlert","useRouter","Reports","useStyles","styles","router","classes","alerts","setAlerts","lastVisibleData","setLastVisibleData","page","setPage","rowsPerPage","setRowsPerPage","totalAlerts","setTotalAlerts","isUserLoggedIn","setIsUserLoggedIn","alertsReport","headRows","bodyRows","map","alert","senderName","senderNumber","location","incidentType","message","lng","lat","autoTable","theme","head","body","margin","top","lineWidth","headStyles","fillColor","fontSize","footStyles","handleDownload","save","handleChangePage","event","newPage","fetchNextAlerts","fetchPreviousAlerts","fetchOldAlerts","alertsArr","collection","orderBy","limit","get","then","querySnapshot","forEach","currentAlertData","data","id","push","docs","length","handleChangeRowsPerPage","parseInt","target","value","fetchAlerts","alertsSize","snap","size","startAfter","endBefore","onAuthStateChanged","user","cardTitleWhite","cardCategoryWhite","float","marginLeft","root","date","seconds","format","recipients","status","color","marginTop","marginBottom","minHeight","fontWeight","fontFamily","textDecoration","lineHeight","printReport","pagination","padding","layout"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { firestore, auth } from '../../firebase';\nimport moment from 'moment';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Admin from 'layouts/Admin.js';\nimport Divider from '@material-ui/core/Divider';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Paper from '@material-ui/core/Paper';\nimport GridItem from 'components/Grid/GridItem.js';\nimport GridContainer from 'components/Grid/GridContainer.js';\nimport FilterAlerts from 'components/Menu/filterDataMenu';\nimport DownloadReport from 'components/Menu/downloadReport';\nimport Table from 'components/Table/Table.js';\nimport Card from 'components/Card/Card.js';\nimport CardHeader from 'components/Card/CardHeader.js';\nimport CardBody from 'components/Card/CardBody.js';\nimport ManageAlert from 'components/Menu/viewAlertsMenu.js';\nimport { useRouter } from 'next/router';\n\nexport default function Reports() {\n  const useStyles = makeStyles(styles);\n  const router = useRouter();\n  const classes = useStyles();\n  const [alerts, setAlerts] = useState([]);\n  const [lastVisibleData, setLastVisibleData] = useState(null);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [totalAlerts, setTotalAlerts] = useState(0);\n  const [isUserLoggedIn, setIsUserLoggedIn] = useState(false);\n\n  // PDF report\n  const alertsReport = new jsPDF();\n  const headRows = () => [\n    [\n      'Sender Name',\n      'Sender Number',\n      'Location',\n      'Message',\n      'Longitude',\n      'Latitude',\n      'Incident Type',\n    ],\n  ];\n\n  const bodyRows = () =>\n    alerts &&\n    alerts.map((alert) => [\n      alert.senderName,\n      alert.senderNumber,\n      alert.location,\n      alert.incidentType,\n      alert.message,\n      alert.lng,\n      alert.lat,\n    ]);\n\n  alertsReport.autoTable({\n    theme: 'striped',\n    head: headRows(),\n    body: bodyRows(),\n    margin: { top: 20 },\n    styles: {\n      lineWidth: 1,\n    },\n    headStyles: {\n      fillColor: [0, 0, 0],\n      fontSize: 15,\n    },\n    footStyles: {\n      fillColor: [241, 196, 15],\n      fontSize: 15,\n    },\n  });\n\n  const handleDownload = () => alertsReport.save();\n\n  const handleChangePage = (event, newPage) => {\n    newPage > page ? fetchNextAlerts() : fetchPreviousAlerts();\n    setPage(newPage);\n  };\n\n  const fetchOldAlerts = () => {\n    const alertsArr = [];\n    firestore\n      .collection('sms')\n      .orderBy('date', 'desc')\n      .limit(rowsPerPage)\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach((alert) => {\n          let currentAlertData = alert.data();\n          currentAlertData.id = alert.id;\n          alertsArr.push(currentAlertData);\n          setLastVisibleData(querySnapshot.docs[querySnapshot.docs.length - 1]);\n        });\n      })\n      .then(() => {\n        setAlerts(alertsArr);\n      });\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n    fetchAlerts();\n  };\n\n  const alertsSize = () => {\n    firestore\n      .collection('sms')\n      .get()\n      .then((snap) => {\n        setTotalAlerts(snap.size);\n      });\n  };\n\n  const fetchAlerts = async () => {\n    const alertsArr = [];\n\n    firestore\n      .collection('sms')\n      .orderBy('date')\n      .limit(rowsPerPage)\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach((alert) => {\n          let currentAlertData = alert.data();\n          currentAlertData.id = alert.id;\n          alertsArr.push(currentAlertData);\n          setLastVisibleData(querySnapshot.docs[querySnapshot.docs.length - 1]);\n        });\n      })\n      .then(() => {\n        setAlerts(alertsArr);\n      });\n  };\n\n  const fetchNextAlerts = async () => {\n    const alertsArr = [];\n\n    firestore\n      .collection('sms')\n      .orderBy('date')\n      .startAfter(lastVisibleData)\n      .limit(rowsPerPage)\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach((alert) => {\n          let currentAlertData = alert.data();\n          currentAlertData.id = alert.id;\n          alertsArr.push(currentAlertData);\n          setLastVisibleData(querySnapshot.docs[querySnapshot.docs.length - 1]);\n        });\n      })\n      .then(() => {\n        setAlerts(alertsArr);\n      });\n  };\n\n  // to fix fetch previous alerts\n  const fetchPreviousAlerts = async () => {\n    const alertsArr = [];\n\n    firestore\n      .collection('sms')\n      .orderBy('date')\n      .endBefore(lastVisibleData)\n      .limit(rowsPerPage)\n      .get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach((alert) => {\n          let currentAlertData = alert.data();\n          currentAlertData.id = alert.id;\n          alertsArr.push(currentAlertData);\n          setLastVisibleData(querySnapshot.docs[querySnapshot.docs.length - 1]);\n        });\n      })\n      .then(() => {\n        setAlerts(alertsArr);\n      });\n  };\n\n  useEffect(() => {\n    fetchAlerts();\n    alertsSize();\n    auth.onAuthStateChanged(async (user) => {\n      if (!user) {\n        router.push('../login');\n      } else {\n        setIsUserLoggedIn(true);\n      }\n    });\n  }, []);\n\n  return isUserLoggedIn ? (\n    <GridContainer>\n      <GridItem xs={12} sm={12} md={12}>\n        <Card>\n          <CardHeader>\n            <GridContainer>\n              <GridItem xs={12} sm={12} md={10}>\n                <h4 className={classes.cardTitleWhite}>Incidents</h4>\n                <p className={classes.cardCategoryWhite}>\n                  View and Manage all incidents.\n                </p>\n              </GridItem>\n\n              <GridItem xs={12} sm={12} md={2}></GridItem>\n            </GridContainer>\n          </CardHeader>\n          <Divider />\n          <CardBody>\n            <GridContainer>\n              <GridItem xs={12} sm={12} md={10}>\n                <FilterAlerts\n                  fetchOldAlerts={fetchOldAlerts}\n                  fetchNewAlerts={fetchAlerts}\n                />\n              </GridItem>\n              <div style={{ float: 'right', marginLeft: '55px' }}>\n                <DownloadReport\n                  handleDownload={handleDownload}\n                  alertsData={alerts}\n                />\n              </div>\n            </GridContainer>\n            <Paper style={classes.root}>\n              <Table\n                tableHeaderColor=\"primary\"\n                tableHead={[\n                  'Date',\n                  'Sender name',\n                  'Sender Number.',\n                  'Location',\n                  'Recipients',\n                  'Status',\n                  'Message',\n                  'Action',\n                ]}\n                tableData={alerts.map((data) => [\n                  moment(data.date.seconds).format('LLL'),\n                  data.senderName,\n                  data.senderNumber,\n                  data.location,\n                  data.recipients,\n                  data.status,\n                  data.message,\n                  <ManageAlert alertsData={data} fetchAlerts={fetchAlerts} />,\n                ])}\n              />\n            </Paper>\n          </CardBody>\n          <GridContainer>\n            <GridItem xs={12} sm={12} md={10} container justify=\"center\">\n              <TablePagination\n                component=\"div\"\n                count={totalAlerts}\n                page={page}\n                onPageChange={handleChangePage}\n                rowsPerPage={rowsPerPage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n              />\n            </GridItem>\n            <GridItem xs={12} sm={12} md={2} container></GridItem>\n          </GridContainer>\n        </Card>\n      </GridItem>\n    </GridContainer>\n  ) : null;\n}\n\n// styles\nconst styles = {\n  cardCategoryWhite: {\n    color: '#434444',\n    margin: '0',\n    fontSize: '14px',\n    marginTop: '0',\n    marginBottom: '0',\n  },\n  cardTitleWhite: {\n    color: '#434444',\n    marginTop: '0px',\n    minHeight: 'auto',\n    fontWeight: '500',\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: '3px',\n    textDecoration: 'none',\n    '& small': {\n      color: '#777',\n      fontSize: '65%',\n      fontWeight: '400',\n      lineHeight: '1',\n    },\n    printReport: {\n      float: 'right',\n    },\n  },\n  pagination: {\n    padding: '10px',\n  },\n};\n\nReports.layout = Admin;\n"]},"metadata":{},"sourceType":"module"}